module expresso(input clk,money,sen_borra,sen_grao,sen_temp,nvl_agua,[2:0]sel_borra,rst,clk1hz,
                output reg coffe);

    //parametros utilizando codificação gray

    parameter [3:0] S1contagem_money=4'b0001; //contagem do dinheiro
    parameter [3:0] S2verifica_agua=4'b0011; //verificação do nível de água
    parameter [3:0] S3verifica_borra=4'b0010; //verifica do nível de borra
    parameter [3:0] S4sel_ciclos=4'b0110; // espera de 10 seg para a seleçao do numero de ciclos de moagem
    parameter [3:0] S5verifica_temp=4'b0111; //verifica a temperatura da agua
    parameter [3:0] S6ciclo_moagem=4'b0101; //ciclo de moagem
    parameter [3:0] S6_1verifica_graos=4'b0100; //verifica a qtd de graos a cada ciclo de moagem
    parameter [3:0] S6_2espera=4'b1100; //espera de 10seg caso não haja grãos suficientes
    parameter [3:0] S7café=4'b1101; //despeja a água para a produção de café

    reg z;
    reg [3:0] next_state;
    reg [3:0] current_state;
    reg [3:0] contador=0;
    reg [2:0] n_ciclos;
    
    reg enable = 0;

    always@(posedge clk1hz)   
        begin
            if(enable)
                contador=contador+1;
        end

    always @(posedge clk)
        begin
            if(rst)
                current_state<= S1contagem_money
            else
            current_state<=next_state;
        end


    always @(current_state or sen_borra or sen_grao or sen_temp or nvl_agua or sel_borra)begin
            case(current_state)
            S1contagem_money: if(money==0,50)
                                next_state<=S2verifica_agua; //se o dinheiro estiver correto passa para o próximo estado
                                coffe
                             else if(money<0,50)
                                 next_state<=S1contagem_money; //se o dinheiro for menos que o esperado mantém no estado até que haja o valor correto
                             else begin
                                 next_state<=S2verifica_agua; //se o dinheiro for maior que o esperado passa para o próximo estado e devolve o troco
            S2verifica_agua: if(nvl_agua)
                                next_state<=S3verifica_borra; //se o nível de água for o mínimo necessário passa para o próximo estado
                             else
                                 next_state<=S2verifica_agua; //se não mantém o estado e aguarda a adição de água
            S3verifica_borra: if(!sen_borra)
                                next_state<=S4sel_ciclos; //se a borra não estiver cheia passa para o próximo estado
                              else
                                  next_state<=S3verifica_borra; //se estiver mantém o estado
            S4sel_ciclos: 
                             enable=1;       
                             case(sel_borra)
                                3'b000: n_ciclos<=1;
                                3'b001: n_ciclos<=2;
                                3'b010: n_ciclos<=3;
                                3'b011: n_ciclos<=4;
                                3'b100: n_ciclos<=5;
                                3'b101: n_ciclos<=6;
                                3'b110: n_ciclos<=7;
                                3'b111: n_ciclos<=8;
                            endcase
                            if(contador==10)
                                next_state<=S5verifica_temp;
            S5verifica_temp: if(sen_temp)
                                next_state<=S6ciclo_moagem;
                                            else (printa problema)
           S6ciclo_moagem: case(n_ciclos)
								0: begin 
									next_state <= S9cafe;
									end
								1: begin 
									next_state <= S6ciclo_moagem;
								   n_ciclos <= (n_ciclos-1);
									end
								2: begin 
									next_state<=S6ciclo_moagem;
								   n_ciclos <= (n_ciclos-1);
									end
								3: begin 	
									next_state <= S6ciclo_moagem;
								   n_ciclos <= (n_ciclos-1);
									end
								4: begin 
									next_state <= S6ciclo_moagem;
								   n_ciclos <= (n_ciclos-1);
									end
								5: begin 
									next_state <= S6ciclo_moagem;
								   n_ciclos <= (n_ciclos-1);
									end
								6: begin 
									next_state <= S6ciclo_moagem;
								   n_ciclos <= (n_ciclos-1);
									end
								7: begin 
									next_state <= S6ciclo_moagem;
								   n_ciclos <= (n_ciclos-1);
									end
								8: begin 
									next_state <= S6ciclo_moagem;
								   n_ciclos <= (n_ciclos-1);
									end
							endcase


        end


    always @(current_state)begin
case(current_state)
            S1contagem_money: coffee=0;
            S2verifica_agua: coffee=0;
            S3verifica_borra: coffee=0;
            S4sel_ciclos: coffee=0;
            S5verifica_temp: coffee=0;
            S6ciclo_moagem: coffee=0;
            S7verifica_graos: coffee=0;
            S8espera: coffee=0;
            S9cafe: coffee=1;
        endcase
        end

endmodule





